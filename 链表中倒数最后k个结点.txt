方法一：快慢指针。先让快指针走k步，然后再让快慢指针同步走，此时差距永远是k，当快指针走到NULL时，此时的慢指针指向的就是倒数第k个

/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 *	ListNode(int x) : val(x), next(nullptr) {}
 * };
 */
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param pHead ListNode类 
     * @param k int整型 
     * @return ListNode类
     */
    ListNode* FindKthToTail(ListNode* pHead, int k) {
        if(pHead == NULL)
        return NULL;

        ListNode*fast = pHead;
        ListNode*slow = pHead;

        //快指针先走k步
        while(k--)
        {
            if(fast != NULL)
            fast = fast->next;

            else
             return NULL;
        }

        //随后快慢指针同步,快指针到尾部时，满指针指向倒数第k个
        while(fast != NULL)
        {
            fast = fast->next;
            slow = slow->next;
        }
        return slow;
    }
};

方法二：先找长度再找最后k（扩展思路）
思路：

链表不能逆向遍历，也不能直接访问。但是对于倒数第
k个位置，我们只需要知道是正数多少位还是可以直接遍历得到的。

具体做法：

step 1：可以先遍历一次链表找到链表的长度。
step 2：然后比较链表长度是否比k小，如果比k小返回一个空节点。
step 3：如果链表足够长，则我们从头节点往后遍历n−k次即可找到所求。

class Solution {
public:
    ListNode* FindKthToTail(ListNode* pHead, int k) {
        int n = 0;
        ListNode* p = pHead;
        //统计链表长度
        while(p != NULL){ 
            n++;
            p = p->next;
        }
        //长度过小，返回空链表
        if(n < k) 
            return NULL;
        p = pHead;
        //遍历n-k次
        for(int i = 0; i < n - k; i++) 
            p = p->next;
        return p;
    }
};
