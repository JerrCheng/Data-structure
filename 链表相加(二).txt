使用两次反转，先反转链表，挨个相加后，最后再将结果反转

class Solution {
  public:
    /**
     *
     * @param head1 ListNode类
     * @param head2 ListNode类
     * @return ListNode类
     */

    //先反转链表
    ListNode* ReverseList(ListNode* head) {
        if (head == NULL)
            return NULL;

        ListNode* cur = head;
        ListNode* pre = NULL;
        while (cur != NULL) {
            ListNode* tmp = cur->next;
            cur->next = pre;
            pre = cur;
            cur = tmp;
        }
        return pre;
    }
    ListNode* addInList(ListNode* head1, ListNode* head2) {
        if (head1 == NULL)
            return head2;

        if (head2 == NULL)
            return head1;

        head1 = ReverseList(head1);
        head2 = ReverseList(head2);

        //添加表头
        ListNode* res = new ListNode(-1);
        ListNode* head = res;

        //进位符号
        int carry = 0;
        //只要某个链表还有或者进位还有
        while (head1 != NULL || head2 != NULL || carry != 0) {
            //链表不为空则取其值
            int val1 = head1 == NULL ? 0 : head1->val;
            int val2 = head2 == NULL ? 0 : head2->val;
            //相加
            int temp = val1 + val2 + carry;

            //获取进位
            carry = temp / 10;
            temp %= 10;
            
            //添加元素
            head->next = new ListNode(temp);
            head = head->next;
            //移动下一个
            if (head1 != NULL)
                head1 = head1->next;
            if (head2 != NULL)
                head2 = head2->next;
        }
        //结果反转回来
        return ReverseList(res->next);

    }


};