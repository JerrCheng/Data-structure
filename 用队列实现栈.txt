// 链式结构：表示队列 
typedef int QDataType;
typedef struct QListNode
{
	struct QListNode* next;
	QDataType data;
}QNode;
 
// 队列的结构 
typedef struct Queue
{
	QNode* front;
	QNode* rear;
}Queue;
 
// 初始化队列 
void QueueInit(Queue* q);
// 队尾入队列 
void QueuePush(Queue* q, QDataType data);
// 队头出队列 
void QueuePop(Queue* q);
// 获取队列头部元素 
QDataType QueueFront(Queue* q);
// 获取队列队尾元素 
QDataType QueueBack(Queue* q);
// 获取队列中有效元素个数 
int QueueSize(Queue* q);
// 检测队列是否为空，如果为空返回非零结果，如果非空返回0 
int QueueEmpty(Queue* q);
// 销毁队列 
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
// 初始化队列 
void QueueInit(Queue* q) {
	assert(q);
	q->front = NULL;
	q->rear = NULL;
}
// 检测队列是否为空，如果为空返回非零结果，如果非空返回0 
int QueueEmpty(Queue* q) {
	assert(q);
	if (q->front==NULL)
		return 1;
	else
		return 0;
}
// 队尾入队列 
void QueuePush(Queue* q, QDataType data) {
	assert(q);
	QNode* newnode = (QNode*)malloc(sizeof(QNode));
	assert(newnode);
	newnode->data = data;
	newnode->next = NULL;
	if (QueueEmpty(q))
		q->front = q->rear = newnode;
	else 
	{
		q->rear->next = newnode;
		q->rear = newnode;
	}
}
// 队头出队列 
void QueuePop(Queue* q) {
	assert(q);
	if (QueueEmpty(q))return;
	else {
		if (q->front->next == NULL) {
			free(q->front);
			q->front = q->rear = NULL;
		}//一个元素出队
		else {
			QNode* next = q->front->next;
			free(q->front);
			q->front = next;
		}
	}
}
// 获取队列头部元素 
QDataType QueueFront(Queue* q) {
	assert(q);
	if (QueueEmpty(q))
		return -1;
	else
		return q->front->data;
}
// 获取队列队尾元素 
QDataType QueueBack(Queue* q) {
	assert(q);
	if (QueueEmpty(q))
		return -1;
	else
		return q->rear->data;
}
// 获取队列中有效元素个数 
int QueueSize(Queue* q) {
	assert(q);
	if (QueueEmpty(q))
		return 0;
	else
	{
		int size = 0;
		QNode* cur = q->front;
		while (cur) {
			size++;
			cur = cur->next;
		}
		return size;
	}
}
 
// 销毁队列 
void QueueDestroy(Queue* q) {
	assert(q);
	while (q->front != NULL) {
		QueuePop(q);
	}
}

typedef struct {
Queue*q1;
Queue*q2;
} MyStack;
 
 
MyStack* myStackCreate() {
MyStack*new=(MyStack*)malloc(sizeof(MyStack));
new->q1=(Queue*)malloc(sizeof(Queue));
new->q2=(Queue*)malloc(sizeof(Queue));
QueueInit(new->q1);
QueueInit(new->q2);
return new;
}
 
void myStackPush(MyStack* obj, int x) {
if(QueueEmpty(obj->q1)==0)
    QueuePush(obj->q1,x);
else
    QueuePush(obj->q2,x);
}
 
int myStackPop(MyStack* obj) {
if(QueueEmpty(obj->q1)==0)
{
    while(QueueSize(obj->q1)!=1){
        QueuePush(obj->q2,QueueFront(obj->q1));
        QueuePop(obj->q1);
    }
    int top=QueueFront(obj->q1);
    QueuePop(obj->q1);
    return top;
}else{
    while(QueueSize(obj->q2)!=1){
    QueuePush(obj->q1,QueueFront(obj->q2));
    QueuePop(obj->q2);
    }
    int top=QueueFront(obj->q2);
    QueuePop(obj->q2);
    return top;
}
}
 
int myStackTop(MyStack* obj) {
if(QueueEmpty(obj->q1)==0)
return QueueBack(obj->q1);
else
return QueueBack(obj->q2);
}
 
bool myStackEmpty(MyStack* obj) {
return QueueEmpty(obj->q1)&&QueueEmpty(obj->q2);
}
 
void myStackFree(MyStack* obj) {
QueueDestroy(obj->q1);
QueueDestroy(obj->q2);
free(obj->q1);
free(obj->q2);
free(obj);
}