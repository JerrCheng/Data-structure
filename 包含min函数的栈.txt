step1：使用一个栈记录进入栈的元素，正常进行push、pop、top操作。
step 2：使用另一个栈记录每次push进入的最小值。
step 3：每次push元素的时候与第二个栈的栈顶元素比较，若是较小，则进入第二个栈，若是较大，则第二个栈的栈顶元素再次入栈，因为即便加了一个元素，它依然是最小值。于是，每次访问最小值即访问第二个栈的栈顶。

class Solution {
public:
    stack<int> s1; //用于pop和push
    stack<int> s2; //用于储存min值
    void push(int value) {
        s1.push(value);
        if(s2.empty() || s2.top() > value)
        s2.push(value);
        else
        s2.push(s2.top());
        
    }
    void pop() {
        s1.pop();
        s2.pop();

        
    }
    int top() {
        return s1.top();
    }
    int min() {
        return s2.top();
    }
};