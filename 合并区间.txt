step 1：既然要求重叠后的区间按照起点位置升序排列，我们就将所有区间按照起点位置先进行排序。使用sort函数进行排序，重载比较方式为比较interval结构的start变量。
step 2：排序后的第一个区间一定是起点值最小的区间，我们将其计入返回数组res，然后遍历后续区间。
step 3：后续遍历过程中，如果遇到起点值小于res中最后一个区间的末尾值的情况，那一定是重叠，取二者最大末尾值更新res中最后一个区间即可。
step 4：如果遇到起点值大于res中最后一个区间的末尾值的情况，那一定没有重叠，后续也不会有这个末尾的重叠区间了，因为后面的起点只会更大，因此可以将它加入res。

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
     //重载比较
    static bool cmp(Interval &a, Interval &b) 
    {
        return a.start < b.start;
    }
    vector<Interval> merge(vector<Interval> &intervals) {
        vector<Interval> res;
        if(intervals.size() == 0)
        return res;

        //按照区间排序
        sort(intervals.begin(),intervals.end(),cmp);

        //放入第一个区间
        res.push_back(intervals[0]);

        //遍历后续区间，查看是否于末尾有重叠
        for(int i=0;i<intervals.size();++i)
        {
            //区间有重叠，更新
            if(intervals[i].start <= res.back().end)
                res.back().end = max(res.back().end,intervals[i].end);

            else
                res.push_back(intervals[i]);    
        }
        return res;

    }
};